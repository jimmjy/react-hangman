{"version":3,"sources":["reducers/index.js","reducers/wordsReducer.js","reducers/guessedLetters.js","reducers/remainingGuesses.js","components/gameboard/gameboardAssets/Letters.js","components/gameboard/gameboardAssets/RemainingGuesses.js","components/gameboard/GameBoard.js","apis/apiRequest.js","components/App.js","actions/index.js","index.js"],"names":["combineReducers","puzzle","state","arguments","length","undefined","action","type","word","payload","guessedLetters","concat","Object","toConsumableArray","remainingGuesses","connect","props","wordLetter","i","letter","style","react_default","a","createElement","className","key","revelLetters","split","map","includes","toLowerCase","toUpperCase","guesses","playing","Letters","gameboardAssets_RemainingGuesses","onClick","newGameHandler","filter","axios","create","baseURL","App","keyPressEvent","e","test","_this","guessLetters","fetchWords","resetGuessedLetters","resetGuesses","this","window","addEventListener","gameboard_GameBoard","Component","words","_ref","asyncToGenerator","regenerator_default","mark","_callee","dispatch","response","wrap","_context","prev","next","apiRequest","get","params","wordCount","sent","data","stop","_x","apply","char","getState","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","react_redux_es","src_components_App","document","getElementById"],"mappings":"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","file":"static/js/main.933fc6fe.chunk.js","sourcesContent":["import { combineReducers } from 'redux';\nimport wordReducer from './wordsReducer';\nimport guessedLetters from './guessedLetters';\nimport remainingGuesses from './remainingGuesses';\n\nexport default combineReducers({\n\tpuzzle: wordReducer,\n\tguessedLetters: guessedLetters,\n\tremainingGuesses: remainingGuesses,\n});\n\n//need a reducer for guessed letters to store guesses\n","export default (state = {}, action) => {\n\tswitch (action.type) {\n\t\tcase 'FETCH_WORD':\n\t\t\treturn { word: action.payload.puzzle };\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n","export default (state = [], action) => {\n\tswitch (action.type) {\n\t\tcase 'GUESSED_LETTER':\n\t\t\treturn [...state, action.payload];\n\t\tcase 'RESET_GUESSED_LETTERS':\n\t\t\treturn [];\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n","export default (state = 5, action) => {\n\tswitch (action.type) {\n\t\tcase 'DECRESS_GUESSES':\n\t\t\treturn state - 1;\n\t\tcase 'RESET_GUESSES':\n\t\t\treturn 5;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst LetterBoard = props => {\n\tlet wordLetter = (i, letter, style) => {\n\t\treturn (\n\t\t\t<p className={`${style}`} key={i}>\n\t\t\t\t{letter}\n\t\t\t</p>\n\t\t);\n\t};\n\n\t//display * for letters until they are guessed\n\tconst revelLetters = props.word\n\t\t? props.word.split('').map((letter, i) => {\n\t\t\t\tif (\n\t\t\t\t\tprops.guessedLetters.includes(letter.toLowerCase()) ||\n\t\t\t\t\tprops.guessedLetters.includes(letter.toUpperCase())\n\t\t\t\t) {\n\t\t\t\t\treturn wordLetter(i, letter, 'letters');\n\t\t\t\t} else if (letter === ' ') {\n\t\t\t\t\treturn wordLetter(i, letter, 'space');\n\t\t\t\t} else {\n\t\t\t\t\treturn wordLetter(i, '*', 'letters');\n\t\t\t\t}\n\t\t  })\n\t\t: null;\n\n\treturn <div className=\"letter-board\">{revelLetters}</div>;\n};\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tword: state.puzzle.word,\n\t\tguessedLetters: state.guessedLetters,\n\t};\n};\n\nexport default connect(mapStateToProps)(LetterBoard);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nconst RemainingGuesses = props => {\n\treturn (\n\t\t<div className=\"remaining-guesses\">\n\t\t\t<p className=\"remaining-guess\">Remaining Guesses: {props.guesses}</p>\n\t\t</div>\n\t);\n};\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tguesses: state.remainingGuesses,\n\t};\n};\n\nexport default connect(mapStateToProps)(RemainingGuesses);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport Letters from './gameboardAssets/Letters';\nimport RemainingGuesses from './gameboardAssets/RemainingGuesses';\n\nconst GameBoard = props => {\n\tconst playing =\n\t\t//display inplay letters and remaining guesses\n\t\tprops.remainingGuesses > 0 ? (\n\t\t\t<div className=\"game\">\n\t\t\t\t<Letters />\n\t\t\t\t<RemainingGuesses />\n\t\t\t</div>\n\t\t) : (\n\t\t\t//display game over\n\t\t\t<div className=\"game-over\">\n\t\t\t\t<h1>The answer was: {props.word}</h1>\n\t\t\t\t<h1>Game Over, try again</h1>\n\t\t\t\t<button className=\"btn\" onClick={props.newGameHandler}>\n\t\t\t\t\tNew Game\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t);\n\n\t//check if user guessed all the letters in puzzle word\n\tconst filter = props.word\n\t\t? props.word.split('').filter(letter => {\n\t\t\t\treturn (\n\t\t\t\t\t!props.guessedLetters.includes(letter.toLowerCase()) &&\n\t\t\t\t\t!props.guessedLetters.includes(letter.toUpperCase()) &&\n\t\t\t\t\tletter !== ' '\n\t\t\t\t);\n\t\t  })\n\t\t: null;\n\n\t//changes ui based on if the user has won or not\n\treturn filter !== null && filter.length > 0 ? (\n\t\t//display current game playing if user hasn't guessed all the letters\n\t\tplaying\n\t) : (\n\t\t//display the user has won\n\t\t<div className=\"game-won\">\n\t\t\t<h1>You won!!</h1>{' '}\n\t\t\t<button className=\"btn\" onClick={props.newGameHandler}>\n\t\t\t\tNew Game\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tword: state.puzzle.word,\n\t\tremainingGuesses: state.remainingGuesses,\n\t\tguessedLetters: state.guessedLetters,\n\t};\n};\n\nexport default connect(mapStateToProps)(GameBoard);\n","import axios from 'axios';\n\nexport default axios.create({ baseURL: 'https://puzzle.mead.io' });\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n\nimport GameBoard from './gameboard/GameBoard';\nimport { fetchWords, guessLetters, resetGuessedLetters, resetGuesses } from '../actions';\nimport './App.scss';\n\nclass App extends Component {\n\tkeyPressEvent = e => {\n\t\t//----------- regex for a-z -------------\n\t\tif (/[a-zA-Z]/.test(e.key)) {\n\t\t\tthis.props.guessLetters(e.key);\n\t\t}\n\t};\n\n\tcomponentDidMount() {\n\t\t//initialize the game with 2 words -------- update to give user options --------\n\t\tthis.props.fetchWords(2);\n\t\twindow.addEventListener('keypress', this.keyPressEvent);\n\t}\n\n\tnewGameHandler = () => {\n\t\tthis.props.fetchWords(2);\n\t\tthis.props.resetGuessedLetters();\n\t\tthis.props.resetGuesses();\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1 className=\"header\">\n\t\t\t\t\t<span className=\"swivel\">H</span>angman\n\t\t\t\t</h1>\n\t\t\t\t<div className=\"game-body\">\n\t\t\t\t\t<GameBoard newGameHandler={this.newGameHandler} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\tpuzzle: state.puzzle,\n\t\tremainingGuesses: state.remainingGuesses,\n\t};\n};\n\nexport default connect(\n\tmapStateToProps,\n\t{ fetchWords, guessLetters, resetGuessedLetters, resetGuesses },\n)(App);\n","import apiRequest from '../apis/apiRequest';\n\n//need to add action to call fetchWords then\n\nexport const fetchWords = words => async dispatch => {\n\tconst response = await apiRequest.get('/puzzle', {\n\t\tparams: {\n\t\t\twordCount: words,\n\t\t},\n\t});\n\n\tdispatch({ type: 'FETCH_WORD', payload: response.data });\n};\n\nexport const guessLetters = char => (dispatch, getState) => {\n\tif (\n\t\t!getState().guessedLetters.includes(char.toLowerCase()) &&\n\t\t!getState().guessedLetters.includes(char.toUpperCase())\n\t) {\n\t\tdispatch({ type: 'GUESSED_LETTER', payload: char });\n\n\t\t//if puzzle word does not contain letter or is not space, reduce guesses\n\t\tif (\n\t\t\t!getState().puzzle.word.includes(char.toLowerCase()) &&\n\t\t\t!getState().puzzle.word.includes(char.toUpperCase())\n\t\t) {\n\t\t\tdispatch({ type: 'DECRESS_GUESSES' });\n\t\t}\n\t}\n};\n\nexport const resetGuesses = () => {\n\treturn { type: 'RESET_GUESSES' };\n};\nexport const resetGuessedLetters = () => {\n\treturn { type: 'RESET_GUESSED_LETTERS' };\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\n\nimport reducers from './reducers';\nimport './index.scss';\nimport App from './components/App';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n"],"sourceRoot":""}